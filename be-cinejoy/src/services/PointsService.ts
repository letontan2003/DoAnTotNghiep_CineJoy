import { User } from "../models/User";
import Order from "../models/Order";

class PointsService {
  // T·ª± ƒë·ªông c·∫≠p nh·∫≠t ƒëi·ªÉm cho t·∫•t c·∫£ order CONFIRMED
  async updatePointsForConfirmedOrders(): Promise<{
    processedOrders: number;
    totalPointsAdded: number;
    updatedUsers: string[];
  }> {
    try {

      // T√¨m t·∫•t c·∫£ order c√≥ tr·∫°ng th√°i CONFIRMED v√† ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω ƒëi·ªÉm
      const confirmedOrders = await Order.find({
        orderStatus: 'CONFIRMED',
        $or: [
          { pointsProcessed: { $exists: false } }, // Ch∆∞a c√≥ field pointsProcessed
          { pointsProcessed: false }, // Ho·∫∑c pointsProcessed = false
          { pointsProcessed: null }   // Ho·∫∑c pointsProcessed = null
        ]
      }).populate({
        path: 'foodCombos.comboId',
        select: 'type name'
      });

      if (confirmedOrders.length === 0) {
        return {
          processedOrders: 0,
          totalPointsAdded: 0,
          updatedUsers: []
        };
      }

      console.log(`üìä Found ${confirmedOrders.length} confirmed orders to process`);
      
      // Log chi ti·∫øt c√°c order ƒë·ªÉ debug
      for (const order of confirmedOrders) {
        console.log(`üìã Order ${order._id}: ${order.seats?.length || 0} seats, ${order.foodCombos?.length || 0} combos`);
      }

      let totalPointsAdded = 0;
      const updatedUsers: string[] = [];

      for (const order of confirmedOrders) {
        try {
          // T√≠nh s·ªë ƒëi·ªÉm cho order n√†y
          let pointsToAdd = 0;
          let seatPoints = 0;
          let comboPoints = 0;

          // C·ªông 5 ƒëi·ªÉm cho m·ªói v√© xem phim (seat)
          if (order.seats && order.seats.length > 0) {
            seatPoints = order.seats.length * 5;
            pointsToAdd += seatPoints;
            console.log(`  üé´ Seats: ${order.seats.length} x 5 = ${seatPoints} points`);
          }

          // C·ªông 5 ƒëi·ªÉm cho m·ªói combo (ch·ªâ lo·∫°i "combo", kh√¥ng ph·∫£i "single")
          if (order.foodCombos && order.foodCombos.length > 0) {
            for (const combo of order.foodCombos) {
              // Ki·ªÉm tra type c·ªßa combo - ch·ªâ c·ªông ƒëi·ªÉm cho type "combo"
              const comboData = combo.comboId as any; // Cast ƒë·ªÉ tr√°nh l·ªói TypeScript
              if (comboData && typeof comboData === 'object' && comboData.type === 'combo') {
                const comboPoint = combo.quantity * 5; // C·ªông 5 ƒëi·ªÉm cho m·ªói s·∫£n ph·∫©m combo (nh√¢n v·ªõi quantity)
                comboPoints += comboPoint;
                pointsToAdd += comboPoint;
                console.log(`  üçø Combo (${comboData.name}): ${combo.quantity} x 5 = ${comboPoint} points`);
              } else {
                console.log(`  ü•§ Single item (${comboData?.name || 'Unknown'}): 0 points (type: ${comboData?.type || 'unknown'})`);
              }
            }
          }

          console.log(`  üìä Total points for order ${order._id}: ${pointsToAdd} (${seatPoints} seats + ${comboPoints} combos)`);

          if (pointsToAdd > 0) {
            // C·∫≠p nh·∫≠t ƒëi·ªÉm cho user
            await User.findByIdAndUpdate(
              order.userId,
              { $inc: { point: pointsToAdd } }
            );

            totalPointsAdded += pointsToAdd;
            
            if (!updatedUsers.includes(order.userId.toString())) {
              updatedUsers.push(order.userId.toString());
            }

            console.log(`‚úÖ Added ${pointsToAdd} points to user ${order.userId} for order ${order._id}`);
          }

          // ƒê√°nh d·∫•u order ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ƒëi·ªÉm
          await Order.findByIdAndUpdate(order._id, { pointsProcessed: true });

        } catch (error) {
          console.error(`‚ùå Error processing order ${order._id}:`, error);
        }
      }

      console.log(`‚úÖ Points processing completed: ${totalPointsAdded} points added to ${updatedUsers.length} users`);

      return {
        processedOrders: confirmedOrders.length,
        totalPointsAdded,
        updatedUsers
      };

    } catch (error) {
      console.error('‚ùå Error in updatePointsForConfirmedOrders:', error);
      throw error;
    }
  }

  // L·∫•y ƒëi·ªÉm hi·ªán t·∫°i c·ªßa user
  async getUserPoints(userId: string): Promise<number> {
    try {
      const user = await User.findById(userId).select('point');
      return user?.point || 0;
    } catch (error) {
      console.error('‚ùå Error getting user points:', error);
      throw error;
    }
  }

  // C·ªông ƒëi·ªÉm cho m·ªôt order c·ª• th·ªÉ (g·ªçi ngay khi thanh to√°n th√†nh c√¥ng)
  async updatePointsForSingleOrder(orderId: string): Promise<{
    success: boolean;
    pointsAdded: number;
    message: string;
  }> {
    try {
      console.log(`üéØ Processing points for single order: ${orderId}`);

      // T√¨m order theo ID v√† populate comboId ƒë·ªÉ l·∫•y th√¥ng tin type
      const order = await Order.findById(orderId).populate({
        path: 'foodCombos.comboId',
        select: 'type name'
      });

      if (!order) {
        console.log(`‚ùå Order ${orderId} not found`);
        return {
          success: false,
          pointsAdded: 0,
          message: 'Order not found'
        };
      }

      // Ki·ªÉm tra order ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ƒëi·ªÉm ch∆∞a
      if (order.pointsProcessed) {
        console.log(`‚ÑπÔ∏è Order ${orderId} already processed for points`);
        return {
          success: true,
          pointsAdded: 0,
          message: 'Order already processed'
        };
      }

      // Ki·ªÉm tra order status
      if (order.orderStatus !== 'CONFIRMED') {
        console.log(`‚ùå Order ${orderId} status is not CONFIRMED: ${order.orderStatus}`);
        return {
          success: false,
          pointsAdded: 0,
          message: `Order status is ${order.orderStatus}, not CONFIRMED`
        };
      }

      let pointsToAdd = 0;

      // T√≠nh ƒëi·ªÉm cho v√© (seats)
      if (order.seats && order.seats.length > 0) {
        pointsToAdd += order.seats.length * 5;
        console.log(`  üìç Seats: ${order.seats.length} x 5 = ${order.seats.length * 5} points`);
      }

      // T√≠nh ƒëi·ªÉm cho combo (foodCombos) - ch·ªâ c·ªông 5 ƒëi·ªÉm cho lo·∫°i "combo", kh√¥ng ph·∫£i "single"
      if (order.foodCombos && order.foodCombos.length > 0) {
        for (const combo of order.foodCombos) {
          // Ki·ªÉm tra type c·ªßa combo - ch·ªâ c·ªông ƒëi·ªÉm cho type "combo"
          const comboData = combo.comboId as any; // Cast ƒë·ªÉ tr√°nh l·ªói TypeScript
          if (comboData && typeof comboData === 'object' && comboData.type === 'combo') {
            const comboPoints = combo.quantity * 5; // C·ªông 5 ƒëi·ªÉm cho m·ªói s·∫£n ph·∫©m combo (nh√¢n v·ªõi quantity)
            pointsToAdd += comboPoints;
            console.log(`  üçø Combo (${comboData.name}): ${combo.quantity} x 5 = ${comboPoints} points`);
          } else {
            console.log(`  ü•§ Single item (${comboData?.name || 'Unknown'}): 0 points (type: ${comboData?.type || 'unknown'})`);
          }
        }
      }

      if (pointsToAdd > 0) {
        // C·ªông ƒëi·ªÉm cho user
        await User.findByIdAndUpdate(
          order.userId,
          { $inc: { point: pointsToAdd } }
        );

        // ƒê√°nh d·∫•u order ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ƒëi·ªÉm
        await Order.findByIdAndUpdate(orderId, { pointsProcessed: true });

        console.log(`‚úÖ Added ${pointsToAdd} points to user ${order.userId} for order ${orderId}`);

        return {
          success: true,
          pointsAdded: pointsToAdd,
          message: `Successfully added ${pointsToAdd} points`
        };
      } else {
        console.log(`‚ÑπÔ∏è No points to add for order ${orderId}`);
        return {
          success: true,
          pointsAdded: 0,
          message: 'No points to add'
        };
      }

    } catch (error) {
      console.error(`‚ùå Error processing points for order ${orderId}:`, error);
      return {
        success: false,
        pointsAdded: 0,
        message: `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  // Ch·∫°y c·∫≠p nh·∫≠t ƒëi·ªÉm manual (ƒë·ªÉ test)
  async runManualPointsUpdate(): Promise<any> {
    console.log('üîß Running manual points update...');
    return await this.updatePointsForConfirmedOrders();
  }

  // Force TypeScript recompilation
  // Method updatePointsForSingleOrder is defined above
}

export default new PointsService();
