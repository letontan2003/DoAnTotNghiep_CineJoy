import ShowtimeService from './ShowtimeService';
import pointsService from './PointsService';
import MoviesService from './MoviesService';

class SchedulerService {
  private showtimeService: ShowtimeService;
  private moviesService: MoviesService;
  private pointsService: typeof pointsService;
  private cleanupInterval: NodeJS.Timeout | null = null;
  private movieStatusInterval: NodeJS.Timeout | null = null;
  private expiredShowtimeInterval: NodeJS.Timeout | null = null;

  constructor() {
    this.showtimeService = new ShowtimeService();
    this.moviesService = new MoviesService();
    this.pointsService = pointsService;
  }

  // B·∫Øt ƒë·∫ßu scheduled job ƒë·ªÉ cleanup expired reservations
  startCleanupScheduler(): void {
    // Ch·∫°y m·ªói 2 ph√∫t ƒë·ªÉ cleanup expired reservations
    this.cleanupInterval = setInterval(async () => {
      try {
        console.log('üïê Starting scheduled cleanup of expired reservations...');
        const result = await this.showtimeService.releaseExpiredReservations();
        
        if (result.released > 0) {
          console.log(`‚úÖ Cleaned up ${result.released} expired reservations`);
        } else {
          console.log('‚úÖ No expired reservations to clean up');
        }
      } catch (error) {
        console.error('‚ùå Error during scheduled cleanup:', error);
      }
    }, 2 * 60 * 1000); // 2 minutes

    console.log('üöÄ Started scheduled cleanup service (every 2 minutes)');
  }

  // D·ª´ng scheduled job
  stopCleanupScheduler(): void {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
      console.log('üõë Stopped scheduled cleanup service');
    }
  }

  // B·∫Øt ƒë·∫ßu scheduled job ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i phim
  startMovieStatusScheduler(): void {
    // Ch·∫°y m·ªói ng√†y l√∫c 00:00 ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i phim
    this.movieStatusInterval = setInterval(async () => {
      try {
        console.log('üé¨ Starting scheduled movie status update...');
        const result = await this.moviesService.updateMovieStatuses();
        
        if (result.updated > 0) {
          console.log(`‚úÖ Updated status for ${result.updated} movies: ${result.message}`);
        } else {
          console.log('‚úÖ No movie statuses to update');
        }
      } catch (error) {
        console.error('‚ùå Error during scheduled movie status update:', error);
      }
    }, 24 * 60 * 60 * 1000); // 24 hours

    console.log('üöÄ Started scheduled movie status update service (daily at 00:00)');
  }

  // D·ª´ng scheduled job c·∫≠p nh·∫≠t tr·∫°ng th√°i phim
  stopMovieStatusScheduler(): void {
    if (this.movieStatusInterval) {
      clearInterval(this.movieStatusInterval);
      this.movieStatusInterval = null;
      console.log('üõë Stopped scheduled movie status update service');
    }
  }

  // B·∫Øt ƒë·∫ßu scheduled job ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i showtime ƒë√£ qu√° ng√†y
  startExpiredShowtimeScheduler(): void {
    console.log('üïê Starting expired showtime scheduler...');
    
    // Ch·∫°y ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông
    this.updateExpiredShowtimes();
    
    // Sau ƒë√≥ ch·∫°y m·ªói ng√†y l√∫c 00:05 (5 ph√∫t sau n·ª≠a ƒë√™m)
    this.expiredShowtimeInterval = setInterval(() => {
      const now = new Date();
      const hours = now.getHours();
      const minutes = now.getMinutes();
      
      // Ch·∫°y v√†o l√∫c 00:05 m·ªói ng√†y
      if (hours === 0 && minutes === 5) {
        this.updateExpiredShowtimes();
      }
    }, 60000); // Check m·ªói ph√∫t

    console.log('‚úÖ Expired showtime scheduler started. Will run daily at 00:05');
  }

  // Kh·ªüi ƒë·ªông scheduler ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t ƒëi·ªÉm cho order CONFIRMED
  startPointsUpdateScheduler(): void {
    console.log('üïê Starting points update scheduler...');
    
    // Ch·∫°y ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông
    this.updatePointsForOrders();
    
    // Sau ƒë√≥ ch·∫°y m·ªói 5 ph√∫t
    setInterval(() => {
      this.updatePointsForOrders();
    }, 5 * 60 * 1000); // 5 ph√∫t

    console.log('‚úÖ Points update scheduler started. Will run every 5 minutes');
  }

  // C·∫≠p nh·∫≠t ƒëi·ªÉm cho c√°c order CONFIRMED
  private async updatePointsForOrders(): Promise<void> {
    try {
      console.log('üîÑ Running points update...');
      const result = await this.pointsService.updatePointsForConfirmedOrders();
      
      if (result.processedOrders > 0) {
        console.log(`‚úÖ Updated points for ${result.processedOrders} orders: ${result.totalPointsAdded} points added to ${result.updatedUsers.length} users`);
      } else {
        console.log('‚ÑπÔ∏è No new orders to process for points');
      }
    } catch (error) {
      console.error('‚ùå Error in points update scheduler:', error);
    }
  }

  // D·ª´ng scheduled job c·∫≠p nh·∫≠t tr·∫°ng th√°i showtime
  stopExpiredShowtimeScheduler(): void {
    if (this.expiredShowtimeInterval) {
      clearInterval(this.expiredShowtimeInterval);
      this.expiredShowtimeInterval = null;
      console.log('‚èπÔ∏è Expired showtime scheduler stopped');
    }
  }

  // C·∫≠p nh·∫≠t showtime ƒë√£ qu√° ng√†y
  private async updateExpiredShowtimes(): Promise<void> {
    try {
      console.log('üîÑ Running expired showtime update...');
      const result = await this.showtimeService.updateExpiredShowtimes();
      
      if (result.updatedCount > 0) {
        console.log(`‚úÖ Updated ${result.updatedCount} expired showtimes`);
      } else {
        console.log('‚ÑπÔ∏è No expired showtimes found');
      }
    } catch (error) {
      console.error('‚ùå Error in expired showtime scheduler:', error);
    }
  }

  // Ch·∫°y c·∫≠p nh·∫≠t tr·∫°ng th√°i phim ngay l·∫≠p t·ª©c (cho testing)
  async runMovieStatusUpdateNow(): Promise<{ updated: number; message: string }> {
    console.log('üé¨ Running manual movie status update...');
    return await this.moviesService.updateMovieStatuses();
  }

  // Ch·∫°y manual expired showtime update (cho testing)
  async runManualExpiredUpdate(): Promise<{
    updatedCount: number;
    updatedShowtimes: any[];
  }> {
    try {
      console.log('üîß Running manual expired showtime update...');
      const result = await this.showtimeService.updateExpiredShowtimes();
      console.log(`‚úÖ Manual update completed: ${result.updatedCount} showtimes updated`);
      return result;
    } catch (error) {
      console.error('‚ùå Error in manual update:', error);
      throw error;
    }
  }

  // B·∫Øt ƒë·∫ßu t·∫•t c·∫£ scheduled jobs
  startAllSchedulers(): void {
    console.log('üïê Starting all schedulers...');
    
    this.startCleanupScheduler();
    this.startMovieStatusScheduler();
    this.startExpiredShowtimeScheduler();
    this.startPointsUpdateScheduler();
    
    console.log('‚úÖ All schedulers started');
  }

  // D·ª´ng t·∫•t c·∫£ scheduled jobs
  stopAllSchedulers(): void {
    this.stopCleanupScheduler();
    this.stopMovieStatusScheduler();
    this.stopExpiredShowtimeScheduler();
    // Note: Points scheduler s·ª≠ d·ª•ng setInterval kh√¥ng c·∫ßn d·ª´ng ri√™ng
    
    console.log('‚úÖ All schedulers stopped');
  }

  // Ch·∫°y cleanup ngay l·∫≠p t·ª©c (cho testing)
  async runCleanupNow(): Promise<{ released: number }> {
    console.log('üïê Running manual cleanup of expired reservations...');
    return await this.showtimeService.releaseExpiredReservations();
  }
}

export default SchedulerService;