import { Request, Response } from 'express';
import RoomService from '../services/RoomService';
import Room from '../models/Room';
import { successResponse as createSuccessResponse, errorResponse as createErrorResponse } from '../utils/apiResponse';

// Helper functions for sending responses
const successResponse = (res: Response, statusCode: number, message: string, data?: any) => {
    res.status(statusCode).json(createSuccessResponse(message, data));
};

const errorResponse = (res: Response, statusCode: number, message: string) => {
    res.status(statusCode).json(createErrorResponse(message, statusCode));
};

class RoomController {
    // Get all rooms
    async getAllRooms(req: Request, res: Response) {
        try {
            const rooms = await RoomService.getAllRooms();
            successResponse(res, 200, 'L·∫•y danh s√°ch ph√≤ng chi·∫øu th√†nh c√¥ng', rooms);
        } catch (error: unknown) {
            console.error('L·ªói khi l·∫•y danh s√°ch ph√≤ng chi·∫øu:', error);
            errorResponse(res, 500, 'L·ªói server khi l·∫•y danh s√°ch ph√≤ng chi·∫øu');
        }
    }

    // Get rooms by theater
    async getRoomsByTheater(req: Request, res: Response) {
        try {
            const { theaterId } = req.params;
            const rooms = await RoomService.getRoomsByTheater(theaterId);
 successResponse(res, 200, 'L·∫•y danh s√°ch ph√≤ng chi·∫øu theo r·∫°p th√†nh c√¥ng', rooms);
        } catch (error: unknown) {
            console.error('L·ªói khi l·∫•y danh s√°ch ph√≤ng chi·∫øu theo r·∫°p:', error);
 errorResponse(res, 500, 'L·ªói server khi l·∫•y danh s√°ch ph√≤ng chi·∫øu theo r·∫°p');
        }
    }

    // Get room by ID
    async getRoomById(req: Request, res: Response) {
        try {
            const { id } = req.params;
            const room = await RoomService.getRoomById(id);
            
            if (!room) {
 errorResponse(res, 404, 'Kh√¥ng t√¨m th·∫•y ph√≤ng chi·∫øu');
            }
            
 successResponse(res, 200, 'L·∫•y th√¥ng tin ph√≤ng chi·∫øu th√†nh c√¥ng', room);
        } catch (error: unknown) {
            console.error('L·ªói khi l·∫•y th√¥ng tin ph√≤ng chi·∫øu:', error);
 errorResponse(res, 500, 'L·ªói server khi l·∫•y th√¥ng tin ph√≤ng chi·∫øu');
        }
    }

    // Create new room
    async createRoom(req: Request, res: Response) {
        try {
            const { roomCode, name, theater, capacity, roomType, status, description, seatLayout } = req.body;

            // Validate required fields
            if (!roomCode || !name || !theater || !capacity) {
                errorResponse(res, 400, 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ph√≤ng chi·∫øu');
            }

            // Check if room code already exists
            const existingRoomByCode = await Room.findOne({ roomCode });
            if (existingRoomByCode) {
                errorResponse(res, 400, 'M√£ ph√≤ng chi·∫øu ƒë√£ t·ªìn t·∫°i');
            }

            // Check if room name already exists in this theater
            const isNameExists = await RoomService.isRoomNameExists(theater, name);
            if (isNameExists) {
                errorResponse(res, 400, 'T√™n ph√≤ng chi·∫øu ƒë√£ t·ªìn t·∫°i trong r·∫°p n√†y');
            }

            const roomData = {
                roomCode,
                name,
                theater,
                capacity,
                roomType: roomType || 'Standard',
                status: status || 'active',
                description,
                seatLayout // ‚úÖ Include seatLayout in roomData
            };

            console.log('üé¨ Creating room with data:', roomData);
            console.log('üéØ SeatLayout received:', seatLayout);
            console.log('üéØ SeatLayout type:', typeof seatLayout);
            console.log('üéØ SeatLayout details:', seatLayout ? {
                rows: seatLayout.rows,
                cols: seatLayout.cols,
                seatsCount: Object.keys(seatLayout.seats || {}).length
            } : 'null/undefined');
            const newRoom = await RoomService.createRoom(roomData);
            console.log('Room created successfully:', newRoom._id);
 successResponse(res, 201, 'T·∫°o ph√≤ng chi·∫øu th√†nh c√¥ng', newRoom);
        } catch (error: unknown) {
            console.error('L·ªói khi t·∫°o ph√≤ng chi·∫øu:', error);
            
            if (error instanceof Error && error.message.includes('validation')) {
                return errorResponse(res, 400, 'D·ªØ li·ªáu ph√≤ng chi·∫øu kh√¥ng h·ª£p l·ªá');
            }
            
            return errorResponse(res, 500, 'L·ªói server khi t·∫°o ph√≤ng chi·∫øu');
        }
    }

    // Update room
    async updateRoom(req: Request, res: Response) {
        try {
            const { id } = req.params;
            const { roomCode, name, theater, capacity, roomType, status, description } = req.body;

            // Check if room exists
            const existingRoom = await RoomService.getRoomById(id);
            if (!existingRoom) {
 errorResponse(res, 404, 'Kh√¥ng t√¨m th·∫•y ph√≤ng chi·∫øu');
            }

            // Check if new room code already exists (excluding current room)
            if (roomCode) {
                const existingRoomByCode = await Room.findOne({ roomCode, _id: { $ne: id } });
                if (existingRoomByCode) {
                    errorResponse(res, 400, 'M√£ ph√≤ng chi·∫øu ƒë√£ t·ªìn t·∫°i');
                }
            }

            // Check if new name already exists (excluding current room)
            if (name && theater) {
                const isNameExists = await RoomService.isRoomNameExists(theater, name, id);
                if (isNameExists) {
                    errorResponse(res, 400, 'T√™n ph√≤ng chi·∫øu ƒë√£ t·ªìn t·∫°i trong r·∫°p n√†y');
                }
            }

            const updateData = {
                ...(roomCode && { roomCode }),
                ...(name && { name }),
                ...(theater && { theater }),
                ...(capacity && { capacity }),
                ...(roomType && { roomType }),
                ...(status && { status }),
                ...(description !== undefined && { description })
            };

            const updatedRoom = await RoomService.updateRoom(id, updateData);
 successResponse(res, 200, 'C·∫≠p nh·∫≠t ph√≤ng chi·∫øu th√†nh c√¥ng', updatedRoom);
        } catch (error: unknown) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t ph√≤ng chi·∫øu:', error);
            
            if (error instanceof Error && error.message.includes('validation')) {
 errorResponse(res, 400, 'D·ªØ li·ªáu ph√≤ng chi·∫øu kh√¥ng h·ª£p l·ªá');
            }
            
 errorResponse(res, 500, 'L·ªói server khi c·∫≠p nh·∫≠t ph√≤ng chi·∫øu');
        }
    }

    // Delete room
    async deleteRoom(req: Request, res: Response) {
        try {
            const { id } = req.params;

            // Check if room exists
            const existingRoom = await RoomService.getRoomById(id);
            if (!existingRoom) {
                return errorResponse(res, 404, 'Kh√¥ng t√¨m th·∫•y ph√≤ng chi·∫øu');
            }

            const isDeleted = await RoomService.deleteRoom(id);
            
            if (isDeleted) {
                return successResponse(res, 200, 'X√≥a ph√≤ng chi·∫øu th√†nh c√¥ng');
            } else {
                return errorResponse(res, 500, 'Kh√¥ng th·ªÉ x√≥a ph√≤ng chi·∫øu');
            }
        } catch (error: unknown) {
            console.error('L·ªói khi x√≥a ph√≤ng chi·∫øu:', error);
            return errorResponse(res, 500, 'L·ªói server khi x√≥a ph√≤ng chi·∫øu');
        }
    }

    // Get active rooms by theater
    async getActiveRoomsByTheater(req: Request, res: Response) {
        try {
            const { theaterId } = req.params;
            const rooms = await RoomService.getActiveRoomsByTheater(theaterId);
 successResponse(res, 200, 'L·∫•y danh s√°ch ph√≤ng chi·∫øu ho·∫°t ƒë·ªông th√†nh c√¥ng', rooms);
        } catch (error: unknown) {
            console.error('L·ªói khi l·∫•y danh s√°ch ph√≤ng chi·∫øu ho·∫°t ƒë·ªông:', error);
 errorResponse(res, 500, 'L·ªói server khi l·∫•y danh s√°ch ph√≤ng chi·∫øu ho·∫°t ƒë·ªông');
        }
    }
}

export default new RoomController();
